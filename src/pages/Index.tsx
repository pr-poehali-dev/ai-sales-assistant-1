import Icon from '@/components/ui/icon';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useEffect, useState, useRef } from 'react';

const Index = () => {
  const [isVisible, setIsVisible] = useState<Record<string, boolean>>({});
  const [formData, setFormData] = useState({ name: '', phone: '', message: '' });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const sectionRefs = useRef<(HTMLElement | null)[]>([]);

  // Intersection Observer –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setIsVisible(prev => ({
              ...prev,
              [entry.target.dataset.section]: true
            }));
          }
        });
      },
      { threshold: 0.1, rootMargin: '50px' }
    );

    sectionRefs.current.forEach((ref) => {
      if (ref) observer.observe(ref);
    });

    return () => observer.disconnect();
  }, []);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};
    if (!formData.name.trim()) newErrors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    if (!formData.phone.trim()) {
      newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π';
    } else {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä
      const phoneDigits = formData.phone.replace(/\D/g, '');
      if (phoneDigits.length < 10) {
        newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä';
      }
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      // –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –¥–ª—è Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ä–º—ã
      const telegramMessage = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!\n\n–ò–º—è: ${formData.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}${formData.message ? `\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}` : ''}`;
      const telegramUrl = `https://t.me/cocozzAAA?text=${encodeURIComponent(telegramMessage)}`;
      
      window.open(telegramUrl, '_blank');
      alert('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ Telegram.');
      setFormData({ name: '', phone: '', message: '' });
    }
  };

  const DemoModal = ({ title, botName, description, features }: {
    title: string;
    botName: string;
    description: string;
    features: string[];
  }) => (
    <DialogContent className="max-w-2xl bg-gray-900 border-gray-700">
      <DialogHeader>
        <DialogTitle className="text-2xl text-white">{title}</DialogTitle>
        <DialogDescription className="text-gray-400">
          {description}
        </DialogDescription>
      </DialogHeader>
      
      <div className="space-y-6">
        <div className="bg-gray-800 p-4 rounded-lg">
          <h4 className="text-white font-semibold mb-3">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:</h4>
          <ul className="space-y-2">
            {features.map((feature, index) => (
              <li key={index} className="flex items-start gap-2 text-gray-300">
                <Icon name="CheckCircle" size={16} className="text-green-400 mt-1 flex-shrink-0" />
                {feature}
              </li>
            ))}
          </ul>
        </div>
        
        <div className="bg-gradient-to-r from-blue-900/30 to-purple-900/30 p-6 rounded-lg border border-blue-700">
          <div className="flex items-center gap-4 mb-4">
            <div className="bg-blue-600 p-3 rounded-full">
              <Icon name="MessageSquare" size={24} className="text-white" />
            </div>
            <div>
              <h5 className="text-white font-semibold">–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞</h5>
              <p className="text-blue-300 text-sm">–ü—Ä–∏–º–µ—Ä –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º</p>
            </div>
          </div>
          
          <div className="space-y-3">
            <div className="bg-gray-700 p-3 rounded-lg">
              <div className="text-gray-400 text-xs mb-1">–ö–ª–∏–µ–Ω—Ç:</div>
              <div className="text-white">–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö</div>
            </div>
            <div className="bg-blue-900/50 p-3 rounded-lg">
              <div className="text-blue-300 text-xs mb-1">@{botName}:</div>
              <div className="text-white">–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞—à–∏—Ö —É—Å–ª—É–≥. –£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π...</div>
            </div>
          </div>
        </div>
        
        <Button 
          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700"
          onClick={() => window.open(`https://t.me/${botName}`, '_blank')}
        >
          <Icon name="ExternalLink" size={16} className="mr-2" />
          –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É –≤ Telegram
        </Button>
      </div>
    </DialogContent>
  );
  const benefits = [
    {
      icon: "Zap",
      title: "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ",
      description: "–ù–µ —Ç–µ—Ä—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤"
    },
    {
      icon: "MessageSquare",
      title: "–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ —É—Å–ª—É–≥–∞–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º",
      description: "–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤"
    },
    {
      icon: "Target",
      title: "–ü—Ä–æ–¥–∞—ë—Ç –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é",
      description: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é"
    },
    {
      icon: "Clock",
      title: "–†–∞–±–æ—Ç–∞–µ—Ç 24/7",
      description: "–î–∞–∂–µ –∫–æ–≥–¥–∞ –≤—ã –æ—Ñ–ª–∞–π–Ω"
    },
    {
      icon: "Settings",
      title: "–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –≤–∞—à –±–∏–∑–Ω–µ—Å",
      description: "–ó–∞ 1‚Äì2 –¥–Ω—è"
    }
  ];

  const businesses = [
    "–ú–∞—Å—Ç–µ—Ä–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã (–º–∞–Ω–∏–∫—é—Ä, –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è)",
    "–û–∫–Ω–∞, –Ω–∞—Ç—è–∂–Ω—ã–µ –ø–æ—Ç–æ–ª–∫–∏, —Ä–µ–º–æ–Ω—Ç",
    "–û–±—É—á–µ–Ω–∏–µ –∏ –æ–Ω–ª–∞–π–Ω-—É—Å–ª—É–≥–∏",
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã –∏ —Ç–æ–≤–∞—Ä—ã",
    "–°–ª—É–∂–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏, —Ç–∞–∫—Å–∏ –∏ –∞—Ä–µ–Ω–¥–∞"
  ];

  const bonuses = [
    "–ì–æ—Ç–æ–≤—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –≤–∞—à–∏–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏",
    "–°—Ü–µ–Ω–∞—Ä–∏–π –ø—Ä–æ–¥–∞–∂ –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞",
    "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: Telegram, –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, WhatsApp",
    "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –≤–∞—à—É –Ω–∏—à—É"
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      {/* Hero Section */}
      <section 
        ref={el => sectionRefs.current[0] = el}
        data-section="hero"
        className={`relative overflow-hidden py-20 px-4 transition-all duration-1000 ${
          isVisible.hero ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}
      >
        <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-purple-600/20 backdrop-blur-sm" />
        <div className="container mx-auto max-w-6xl relative z-10">
          <div className="text-center animate-fade-in">
            <div className="inline-flex items-center gap-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white px-4 py-2 rounded-full text-sm font-medium mb-6">
              <Icon name="Bot" size={16} />
              –ò–ò-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
            </div>
            
            <h1 className="text-5xl md:text-7xl font-bold text-white mb-6 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
              –ò–ò-–ø—Ä–æ–¥–∞–≤–µ—Ü –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
            </h1>
            
            <h2 className="text-xl md:text-2xl text-gray-300 mb-8 max-w-4xl mx-auto">
              –ó–∞—è–≤–∫–∏ 24/7 –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            </h2>
            
            <p className="text-lg text-gray-400 mb-12 max-w-3xl mx-auto">
              –í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–ø–∏—Ç –∏ –Ω–µ –±–æ–ª–µ–µ—Ç. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞—è–≤–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–¥–∞—ë—Ç ‚Äî –ø–æ–∫–∞ –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –¥–µ–ª–æ–º.
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center mb-16">
              <Button 
                size="lg" 
                className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white px-8 py-4 text-lg hover-scale"
                onClick={() => window.open('https://t.me/cocozzAAA', '_blank')}
              >
                <Icon name="MessageCircle" size={20} className="mr-2" />
                –ó–∞–∫–∞–∑–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
              </Button>
              
              <Button 
                variant="outline" 
                size="lg" 
                className="border-gray-600 text-gray-300 hover:bg-gray-800 px-8 py-4 text-lg hover-scale"
                onClick={() => {
                  const demoSection = document.querySelector('[data-section="demo"]');
                  if (demoSection) {
                    demoSection.scrollIntoView({ behavior: 'smooth' });
                  }
                }}
              >
                <Icon name="PlayCircle" size={20} className="mr-2" />
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section 
        ref={el => sectionRefs.current[1] = el}
        data-section="benefits"
        className={`py-20 px-4 bg-gray-900/50 transition-all duration-1000 delay-200 ${
          isVisible.benefits ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}
      >
        <div className="container mx-auto max-w-6xl">
          <h2 className="text-4xl font-bold text-center text-white mb-16">
            –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          </h2>
          
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {benefits.map((benefit, index) => (
              <Card 
                key={index} 
                className={`bg-gray-800/50 border-gray-700 hover-scale transition-all duration-500 hover:bg-gray-800/70 ${
                  isVisible.benefits ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
                }`}
                style={{ transitionDelay: `${index * 100}ms` }}
              >
                <CardContent className="p-6">
                  <div className="flex items-start gap-4">
                    <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-3 rounded-lg transform transition-transform duration-300 hover:scale-110">
                      <Icon name={benefit.icon as any} size={24} className="text-white" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-white mb-2">
                        {benefit.title}
                      </h3>
                      <p className="text-gray-400">
                        {benefit.description}
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Target Audience Section */}
      <section 
        ref={el => sectionRefs.current[2] = el}
        data-section="audience"
        className={`py-20 px-4 transition-all duration-1000 delay-300 ${
          isVisible.audience ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}
      >
        <div className="container mx-auto max-w-4xl">
          <h2 className="text-4xl font-bold text-center text-white mb-16">
            –î–ª—è –∫–æ–≥–æ —ç—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
          </h2>
          
          <div className="grid md:grid-cols-2 gap-6">
            {businesses.map((business, index) => (
              <div 
                key={index} 
                className={`flex items-center gap-4 p-4 bg-gray-800/30 rounded-lg border border-gray-700 transition-all duration-500 hover:bg-gray-800/50 hover:border-emerald-500/50 ${
                  isVisible.audience ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-10'
                }`}
                style={{ transitionDelay: `${index * 100}ms` }}
              >
                <div className="bg-gradient-to-r from-emerald-500 to-teal-600 p-2 rounded transition-transform duration-300 hover:scale-110">
                  <Icon name="CheckCircle" size={20} className="text-white" />
                </div>
                <span className="text-gray-300">{business}</span>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* What You Get Section */}
      <section 
        ref={el => sectionRefs.current[3] = el}
        data-section="features"
        className={`py-20 px-4 bg-gray-900/50 transition-all duration-1000 delay-400 ${
          isVisible.features ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}
      >
        <div className="container mx-auto max-w-4xl">
          <h2 className="text-4xl font-bold text-center text-white mb-16">
            –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ
          </h2>
          
          <div className="grid md:grid-cols-2 gap-6">
            {bonuses.map((bonus, index) => (
              <div 
                key={index} 
                className={`flex items-start gap-4 p-6 bg-gray-800/50 rounded-lg border border-gray-700 transition-all duration-500 hover:bg-gray-800/70 hover:border-pink-500/50 ${
                  isVisible.features ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
                }`}
                style={{ transitionDelay: `${index * 150}ms` }}
              >
                <div className="bg-gradient-to-r from-pink-500 to-rose-600 p-2 rounded mt-1 transition-transform duration-300 hover:scale-110">
                  <Icon name="Gift" size={20} className="text-white" />
                </div>
                <span className="text-gray-300 leading-relaxed">{bonus}</span>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Demo Bots Section */}
      <section 
        ref={el => sectionRefs.current[4] = el}
        data-section="demo"
        className={`py-20 px-4 transition-all duration-1000 delay-500 ${
          isVisible.demo ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}
      >
        <div className="container mx-auto max-w-4xl">
          <h2 className="text-4xl font-bold text-center text-white mb-16">
            –ü—Ä–∏–º–µ—Ä—ã —á–∞—Ç-–±–æ—Ç–æ–≤
          </h2>
          
          <div className="grid md:grid-cols-2 gap-8">
            <Dialog>
              <DialogTrigger asChild>
                <Card className={`bg-gradient-to-br from-blue-900/50 to-purple-900/50 border-blue-700 cursor-pointer hover-scale transition-all duration-500 ${
                  isVisible.demo ? 'opacity-100 translate-x-0' : 'opacity-0 -translate-x-10'
                }`}>
                  <CardContent className="p-8 text-center">
                    <div className="bg-blue-600 p-4 rounded-full w-16 h-16 mx-auto mb-4 transition-transform duration-300 hover:scale-110">
                      <Icon name="Bot" size={32} className="text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-white mb-2">@pluchki_bot</h3>
                    <p className="text-blue-300 mb-4">–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏</p>
                    <Button variant="outline" className="border-blue-500 text-blue-300 hover:bg-blue-800">
                      <Icon name="Eye" size={16} className="mr-2" />
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ
                    </Button>
                  </CardContent>
                </Card>
              </DialogTrigger>
              <DemoModal 
                title="–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ @pluchki_bot"
                botName="pluchki_bot"
                description="–ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –ø–æ–ª—å–∑–µ —É—Å–ª—É–≥ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫ –ø–æ–∫—É–ø–∫–µ"
                features={[
                  "–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —É—Å–ª—É–≥–∞—Ö",
                  "–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
                  "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ",
                  "–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                  "–ü–µ—Ä–µ–¥–∞—ë—Ç –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã –≤–∞–º"
                ]}
              />
            </Dialog>
            
            <Dialog>
              <DialogTrigger asChild>
                <Card className={`bg-gradient-to-br from-purple-900/50 to-pink-900/50 border-purple-700 cursor-pointer hover-scale transition-all duration-500 delay-200 ${
                  isVisible.demo ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-10'
                }`}>
                  <CardContent className="p-8 text-center">
                    <div className="bg-purple-600 p-4 rounded-full w-16 h-16 mx-auto mb-4 transition-transform duration-300 hover:scale-110">
                      <Icon name="ShoppingCart" size={32} className="text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-white mb-2">@pocovorimzzzz_bot</h3>
                    <p className="text-purple-300 mb-4">–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂</p>
                    <Button variant="outline" className="border-purple-500 text-purple-300 hover:bg-purple-800">
                      <Icon name="Eye" size={16} className="mr-2" />
                      –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–º–æ
                    </Button>
                  </CardContent>
                </Card>
              </DialogTrigger>
              <DemoModal 
                title="–ë–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂ @pocovorimzzzz_bot"
                botName="pocovorimzzzz_bot"
                description="–ü—Ä–æ–¥–∞—ë—Ç —É—Å–ª—É–≥–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–¥–µ–ª–∫–∏"
                features={[
                  "–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                  "–ü–æ–¥–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª—É–≥–∏",
                  "–°—á–∏—Ç–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏",
                  "–û—Ñ–æ—Ä–º–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–ª–∞—Ç—É",
                  "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"
                ]}
              />
            </Dialog>
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section 
        ref={el => sectionRefs.current[5] = el}
        data-section="contact"
        className={`py-20 px-4 bg-gradient-to-r from-blue-900/30 to-purple-900/30 transition-all duration-1000 delay-600 ${
          isVisible.contact ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'
        }`}
      >
        <div className="container mx-auto max-w-4xl">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-white mb-8">
              –ì–æ—Ç–æ–≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏?
            </h2>
            
            <p className="text-xl text-gray-300 mb-12">
              –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
            </p>
          </div>

          <div className="grid lg:grid-cols-2 gap-12 items-start">
            {/* Contact Form */}
            <Card className="bg-gray-800/50 border-gray-700">
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold text-white mb-6 text-center">
                  –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É
                </h3>
                
                <form onSubmit={handleSubmit} className="space-y-6">
                  <div>
                    <Label htmlFor="name" className="text-gray-300">–ò–º—è *</Label>
                    <Input
                      id="name"
                      type="text"
                      value={formData.name}
                      onChange={(e) => {
                        setFormData(prev => ({ ...prev, name: e.target.value }));
                        if (errors.name) setErrors(prev => ({ ...prev, name: '' }));
                      }}
                      className="bg-gray-700 border-gray-600 text-white focus:border-blue-500"
                      placeholder="–í–∞—à–µ –∏–º—è"
                    />
                    {errors.name && <p className="text-red-400 text-sm mt-1">{errors.name}</p>}
                  </div>
                  
                  <div>
                    <Label htmlFor="phone" className="text-gray-300">–¢–µ–ª–µ—Ñ–æ–Ω *</Label>
                    <Input
                      id="phone"
                      type="tel"
                      value={formData.phone}
                      onChange={(e) => {
                        setFormData(prev => ({ ...prev, phone: e.target.value }));
                        if (errors.phone) setErrors(prev => ({ ...prev, phone: '' }));
                      }}
                      className="bg-gray-700 border-gray-600 text-white focus:border-blue-500"
                      placeholder="+7 999 123 45 67 –∏–ª–∏ 8 999 123 45 67"
                    />
                    {errors.phone && <p className="text-red-400 text-sm mt-1">{errors.phone}</p>}
                  </div>
                  
                  <div>
                    <Label htmlFor="message" className="text-gray-300">–°–æ–æ–±—â–µ–Ω–∏–µ</Label>
                    <Textarea
                      id="message"
                      value={formData.message}
                      onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}
                      className="bg-gray-700 border-gray-600 text-white focus:border-blue-500 resize-none"
                      rows={4}
                      placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –±–∏–∑–Ω–µ—Å –∏ –∑–∞–¥–∞—á–∏..."
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white py-3 text-lg hover-scale"
                  >
                    <Icon name="Send" size={20} className="mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                  </Button>
                </form>
              </CardContent>
            </Card>
            
            {/* Contact Info */}
            <div className="space-y-8">
              <div className="text-center lg:text-left">
                <h3 className="text-2xl font-bold text-white mb-6">
                  –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
                </h3>
                
                <div className="space-y-4">
                  <Button 
                    size="lg" 
                    className="w-full lg:w-auto bg-gradient-to-r from-blue-600 to-teal-600 hover:from-blue-700 hover:to-teal-700 text-white hover-scale"
                    onClick={() => window.open('https://t.me/cocozzAAA', '_blank')}
                  >
                    <Icon name="Send" size={20} className="mr-2" />
                    Telegram: @cocozzAAA
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    size="lg" 
                    className="w-full lg:w-auto border-gray-600 text-gray-300 hover:bg-gray-800 hover-scale"
                    onClick={() => window.open('https://t.me/iidlyabiz', '_blank')}
                  >
                    <Icon name="Users" size={20} className="mr-2" />
                    –ö–∞–Ω–∞–ª: –ò–ò –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
                  </Button>
                </div>
              </div>
              
              <div className="p-6 bg-gray-800/50 rounded-lg border border-gray-700">
                <h3 className="text-lg font-bold text-white mb-4 flex items-center gap-2">
                  <Icon name="Gift" size={20} className="text-pink-400" />
                  –ë–æ–Ω—É—Å—ã –ø—Ä–∏ –∑–∞–∫–∞–∑–µ:
                </h3>
                <div className="text-gray-300 space-y-3">
                  <div className="flex items-start gap-3">
                    <Icon name="CheckCircle" size={16} className="text-emerald-400 mt-1 flex-shrink-0" />
                    <span>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç –≤–∞—à–µ–π –≤–æ—Ä–æ–Ω–∫–∏</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <Icon name="CheckCircle" size={16} className="text-emerald-400 mt-1 flex-shrink-0" />
                    <span>3 —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –Ω–∏—à–∏</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <Icon name="CheckCircle" size={16} className="text-emerald-400 mt-1 flex-shrink-0" />
                    <span>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥ –≤–∞—à—É –Ω–∏—à—É</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Index;